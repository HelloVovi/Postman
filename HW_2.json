{
	"info": {
		"_postman_id": "051e7617-5d35-4e3a-98f1-9144c97ca332",
		"name": "HW_2(repeat)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "EP_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first?name=Vladimir",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					],
					"query": [
						{
							"key": "name",
							"value": "Vladimir"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Спарсить response body в json.\r",
							"    var jsonData = pm.response.json();\r",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Check name\", function () {\r",
							"    \r",
							"    pm.expect(jsonData.name).to.eql(\"Vladimir\");\r",
							"});\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Check age\", function () {\r",
							"   \r",
							"    pm.expect(jsonData.age).to.eql(\"26\");\r",
							"});\r",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Check salary\", function () {\r",
							"   \r",
							"    pm.expect(jsonData.salary).to.eql(500);\r",
							"});\r",
							"//7. Спарсить request.\r",
							"var reqBody = request.data;\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check name\", function () {\r",
							"   \r",
							"    pm.expect(jsonData.name).to.eql(request.data.name);\r",
							"})\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Check age\", function () {\r",
							"   \r",
							"    pm.expect(jsonData.age).to.eql(request.data.age);\r",
							"})\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Check salary\", function () {\r",
							"   \r",
							"    pm.expect(jsonData.salary).to.eql(Number(request.data.salary));\r",
							"})\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"console.log(\"Family\", jsonData.family)\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"Your test name\", function () {\r",
							"  \r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(request.data.salary*4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Vladimir",
							"type": "text"
						},
						{
							"key": "age",
							"value": "26",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"//4. Спарсить request.\r",
							"var reqBody = pm.request.url.query.toObject();\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check name\", function () {\r",
							"   \r",
							"    pm.expect(jsonData.name).to.eql(reqBody.name);\r",
							"});\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Check age\", function () {\r",
							"   \r",
							"    pm.expect(jsonData.age).to.eql(reqBody.age);\r",
							"});\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Check salary\", function () {\r",
							"   \r",
							"    pm.expect(jsonData.salary).to.eql(Number(reqBody.salary));\r",
							"});\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"console.log(\"family\", jsonData.family)\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Dog has name\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"//10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Dog has age\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Dog's name\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.include(\"Luky\");\r",
							"});\r",
							"//12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Dog's age\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.be.oneOf([4]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Vladimir&age=26&salary=500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Vladimir"
						},
						{
							"key": "age",
							"value": "26"
						},
						{
							"key": "salary",
							"value": "500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"//4. Спарсить request.\r",
							"var reqBody = pm.request.url.query.toObject();\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check name(by request))\", function () {\r",
							"   \r",
							"    pm.expect(jsonData.name).to.eql(reqBody.name);\r",
							"})\r",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Check age(by request))\", function () {\r",
							"   \r",
							"    pm.expect(jsonData.age).to.eql(Number(reqBody.age));\r",
							"})\r",
							"//7. Вывести в консоль параметр salary из request.\r",
							"console.log(\"Salary\", reqBody.salary)\r",
							"//8. Вывести в консоль параметр salary из response.\r",
							"console.log(\"Salary\", jsonData.salary)\r",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(\"Salary\", jsonData.salary[0])\r",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"Salary\", jsonData.salary[1])\r",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"Salary\", jsonData.salary[2])\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Your test name\", function () {\r",
							"\r",
							"    pm.expect(jsonData.salary[0]).to.eql(Number(reqBody.salary));\r",
							"});\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Your test name\", function () {\r",
							"\r",
							"    pm.expect(Number(jsonData.salary[1])).to.eql(reqBody.salary*2);\r",
							"});\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Your test name\", function () {\r",
							"\r",
							"    pm.expect(Number(jsonData.salary[2])).to.eql(reqBody.salary*3);\r",
							"});\r",
							"//15. Создать в окружении переменную name\r",
							"var name = jsonData.name\r",
							"pm.environment.set(\"name\", name);\r",
							"//16. Создать в окружении переменную age\r",
							"var age = jsonData.age\r",
							"pm.environment.set(\"age\", age);\r",
							"//17. Создать в окружении переменную salary\r",
							"var salary = jsonData.salary\r",
							"pm.environment.set(\"salary\", salary[0]);\r",
							"//18. Передать в окружение переменную name\r",
							"//{{name}}\r",
							"//19. Передать в окружение переменную age\r",
							"//{{age}}\r",
							"//20. Передать в окружение переменную salary\r",
							"//{{salary}}\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (let i = 0; i <= 2; i++) {\r",
							"\tconsole.log(salary[i]);\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Vladimir&age=26&salary=500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Vladimir"
						},
						{
							"key": "age",
							"value": "26"
						},
						{
							"key": "salary",
							"value": "500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Вставить параметр salary из окружения в request\r",
							"//{{name}}\r",
							"//2. Вставить параметр age из окружения в age\r",
							"//{{age}}\r",
							"//3. Вставить параметр name из окружения в name\r",
							"//{{salary}}\r",
							"//4. Отправить запрос.\r",
							"\r",
							"//5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//6. Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"//7. Спарсить request.\r",
							"var reqBody = request.data;\r",
							"//8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Body matches string start_qa_salary\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"start_qa_salary\");\r",
							"});\r",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Body matches string qa_salary_after_6_months\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"qa_salary_after_6_months\");\r",
							"});\r",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Body matches string qa_salary_after_12_months\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"qa_salary_after_12_months\");\r",
							"});\r",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Body matches string qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Body matches string qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"//13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Body matches string person\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"person\");\r",
							"});\r",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"start_qa_salary равен salary из request\", function () {\r",
							" \r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(Number(reqBody.salary));\r",
							"});\r",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_6_months равен salary*2\", function () {\r",
							" \r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(reqBody.salary*2);\r",
							"});\r",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months\", function () {\r",
							" \r",
							"    pm.expect(jsonData. qa_salary_after_12_months).to.eql(reqBody.salary*2.7);\r",
							"});\r",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5_year\", function () {\r",
							" \r",
							"    pm.expect(Number(jsonData['qa_salary_after_1.5_year'])).to.eql(reqBody.salary*3.3);\r",
							"});\r",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_3.5_years\", function () {\r",
							"   \r",
							"    pm.expect(Number(jsonData['qa_salary_after_3.5_years'])).to.eql(reqBody.salary*3.8);\r",
							"});\r",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"1-й элемент из u_name равен salary из request\", function () {\r",
							"   \r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(Number(reqBody.salary));\r",
							"});\r",
							"//20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"u_age равен age из request\", function () {\r",
							"   \r",
							"    pm.expect(jsonData.person.u_age).to.eql(Number(reqBody.age));\r",
							"});\r",
							"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"u_salary_5_years равен salary*4.2\", function () {\r",
							"   \r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(Number(reqBody.salary*4.2));\r",
							"});\r",
							"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"var person = Object.keys(jsonData.person).length;\r",
							"console.log(person);\r",
							"for (let i = 0; i < person; i++) {\r",
							"\tconsole.log(Object.keys(jsonData.person)[i]);\r",
							"};\r",
							"// 22.2\r",
							"var person = {\r",
							"  u_age: '26',\r",
							"  u_name: 'Vladimir',\r",
							"  u_salary_5_years: 2100\r",
							"};\r",
							"\r",
							"for (const [key, value] of Object.entries(person)) {\r",
							"  console.log(`${key}: ${value}`);\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}